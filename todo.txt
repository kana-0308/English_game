
// 現在進行中のものには先頭に小文字の o をいれる
// 完了したものは先頭に小文字の x をいれる
// todoリストは削除してはならない
// todoリストの追加はいつでもだれでもやっていい
// todoリストの先頭に(A~C)をいれて優先順位をつける
// 入れ子の中での(A~C)はその範囲内での優先順位
// 一行にひとつのtodo
// todoはすべてやらなくてもOK


// 一般
o(A)クイズの画像が表示されるようにする
x(A)<template>で<h1>などをつかい問題文を表示
x(A)クイズの四択制作
x(C)ページを離れる場合に本当にページを離れるか確認するポップを表示する（できればクイズを解いている最中）
(A)英語アプリの名前を決める



// JavaScript
(A)メインボタンを押したときの処理 {
    (A)答え合わせができるようになる {
        (A)なにも単語を選択していない状態でメインボタンを押した場合の処理
        xo(A)正解であれば"Nice"や"Excellent"の文字が表示される
        xo(A)不正解であれば答えの表示
        (C)演出、例えば正解したとき画面が一部緑になるなど
    }
    o(A)答え合わせが終わったらボタンのテキストを変更"Next"など
    x(A)次の問題に移れるようになる
}
(A)進捗バーの実装 {
    x(A)変数currentIndexを利用してバーの長さが変わるようにする
    (C)バーの長さが変わる場合のアニメーション
    x(A)バーの長さがオーバーしないようにする
}
(B)クイズを解き終わった後の処理 {
    (A)間違えた問題をもう一度解きなおすチャンスを与える
    o(B)全て解くのにかかった時間を表示
    (B)正解した数やスコアの表示
}
x(A)単語を選択した場合にマークアップされる（デザインはCSSが担当） {
    x(A)内部のデータである変数selectedWordIndexを更新する関数selectWordを実装
    x(B)Vue.jsの v-bind:class="" を用いてCSSで定義されたクラスselectedに動的に変化
}
x(A)次の問題に移ると選択がリセットされる
o(C)次の問題に移るときのアニメーション
(C)スキップボタンの実装 {
    (A)スキップしたクイズはどうするのか考える
    (B)強制的に次の問題に移る（メインボタンの処理と一部類似）
}
(C)読み込んだクイズデータをランダムな順番にする
(C)スタート画面で読み込むJSONファイルを選択できるようにする




// CSS
(B)メインコンテンツのデザイン.mainの実装 {
    (A)中央寄せにする
}
x(A)表示する画像のデザイン実装 {
    x(A)画像サイズの調整
    x(A)画像のアスペクト比を保つ
}
x(A)単語ボタンをまとめてデザインする.word-optionsの実装 {
    x(A)見栄えがいいようにボタンを配置する
}
x(A)単語ボタンのデザイン.word-options buttonの実装
x(A)単語ボタンを選択した場合のデザイン.word-options button.selectedの実装
o(A)メインボタンのデザインの実装 {
    x(A)見た目、大きさのデザイン
    (B)配置の調整（duolingoでは右下に固定で配置されている）
}
x(C)ボタンクリック時のアニメーション（押し込んだ感じをだす）
x(B)進捗バーのデザインの実装 {
    x(A)角をなくし丸くする
    x(A)大きさ、位置、見やすさなどの調整
}
o(B)見出しやメッセージのデザインの実装
(C)スキップボタンのデザインの実装
o(B)スタート画面のデザインの実装 {
    x(A)スタートボタンを華やかにする
    (C)メインビジュアルなどの表示
    x(A)問題数の入力場所を見やすくする
}
